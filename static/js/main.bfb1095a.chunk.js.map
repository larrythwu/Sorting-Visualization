{"version":3,"sources":["components/Button.jsx","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["STYLES","SIZES","Button","children","type","onClick","buttonStyle","buttonSize","checkButtonStyle","includes","checkButtonSize","className","STOP","RUNNING","arrayBars","document","getElementsByClassName","SortingVisualizer","props","state","array","this","resetArray","min","max","i","push","Math","floor","random","setState","arr","length","style","height","Promise","r","setTimeout","ANIMATION_SPEED","sorted","slice","n","buffer","Array","size","leftStart","left","right","leftLimit","rightLimit","backgroundColor","update_arrayBars","temp","merge_sort","j","tmp","low","high","q","swap","partition","pivot","quickSortHelper","heap","index","righChild","leftChild","heapify","buildMaxHeap","lastElement","mergeSort","quickSort","heapSort","bubbleSort","stop","map","value","idx","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfb1095a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./button.css\";\n\nconst STYLES = [\n  \"btn--primary--solid\",\n  \"btn--warning--solid\",\n  \"btn--danger--solid\",\n  \"btn--success--solid\",\n  \"btn--primary--outline\",\n  \"btn--warning--outline\",\n  \"btn--danger--outline\",\n  \"btn--success--outline\"\n];\n\nconst SIZES = [\"btn--medium\", \"btn--large\"];\n\nexport const Button = ({\n  children,\n  type,\n  onClick,\n  buttonStyle,\n  buttonSize\n}) => {\n  const checkButtonStyle = STYLES.includes(buttonStyle)\n    ? buttonStyle\n    : STYLES[0];\n\n  const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0];\n\n  return (\n    <button\n      className={`btn ${checkButtonStyle} ${checkButtonSize}`}\n      onClick={onClick}\n      type={type}\n    >\n      {children}\n    </button>\n  );\n};\n","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css';\nimport {Button} from '../components/Button.jsx'\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n//animation speed ms\nlet ANIMATION_SPEED = 30;\n\n//stop a certain sorting process\nlet STOP = false;\n\n//indicate if a sorting is already running\nlet RUNNING = false;\n\n//current array\nconst arrayBars = document.getElementsByClassName('array-bar');\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n  this.state = {\n      array: [],\n    };\n  }\n\n//load for the first time, or refresh page\ncomponentDidMount() {\n  this.resetArray();\n  STOP = false;\n}\n\n//reset the array with new values, the same functio that is\nresetArray() {\n  // console.log(\"Entered resetArray\")\n  STOP = true;\n  RUNNING = false;\n  const array = [];\n  for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n    // push number in the range of 10~500 into the array\n    array.push(randomIntFromInterval(10, 500));\n  }\n  //create new array, replace the previous one\n  this.setState({array});\n}\n\nasync update_arrayBars(arr){\n  for(let i =0; i<arrayBars.length; i++){\n    arrayBars[i].style.height = `${arr[i]}px`;\n    if(STOP == false)\n    await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n  }\n\n}\n\nasync merge_sort(arr) {\n    let sorted = arr.slice();\n    let n = sorted.length;\n    let buffer = new Array(n);\n\n    for (let size = 1; size < n; size *= 2) {\n      for (let leftStart = 0; leftStart < n; leftStart += 2*size) {\n        let left = leftStart,\n            right = Math.min(left + size, n),\n            leftLimit = right,\n            rightLimit = Math.min(right + size, n),\n            i = left;\n        while (left < leftLimit && right < rightLimit) {\n          arrayBars[left].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[right].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n          arrayBars[left].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[right].style.backgroundColor = PRIMARY_COLOR;\n\n          if(STOP == true){\n            await this.update_arrayBars(sorted);\n            STOP = false;\n            return sorted;\n          }\n\n          if (sorted[left] <= sorted[right]) {\n            buffer[i++] = sorted[left++];\n          } else {\n            buffer[i++] = sorted[right++];\n          }\n        }\n\n        while (left < leftLimit) {\n          arrayBars[left].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/2));\n          arrayBars[left].style.backgroundColor = PRIMARY_COLOR;\n          buffer[i++] = sorted[left++];\n        }\n        while (right < rightLimit) {\n          arrayBars[right].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/2));\n          arrayBars[right].style.backgroundColor = PRIMARY_COLOR;\n          buffer[i++] = sorted[right++];\n        }\n      }\n      await this.update_arrayBars(buffer);\n\n      let temp = sorted;\n          sorted = buffer;\n          buffer = temp;\n    }\n    return sorted;\n  }\n\n  async mergeSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n    STOP = false;\n\n    this.state.array = await this.merge_sort(this.state.array);\n    RUNNING = false;\n  }\n\n swap (arr, i, j){\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      arrayBars[i].style.height = `${arr[i]}px`;\n      arrayBars[j].style.height = `${arr[j]}px`;\n  }\n\n async partition (arr, low, high){\n    let q = low;\n    let i = 0;\n    arrayBars[high].style.backgroundColor = 'green';\n\n    for (i = low; i < high; i++) {\n      arrayBars[i].style.backgroundColor = SECONDARY_COLOR;\n      arrayBars[q].style.backgroundColor = 'blue';\n      if (arr[i] < arr[high]) {\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/10));\n          arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n          this.swap(arr, i, q);\n          q++;\n      }\n      await new Promise(r => setTimeout(r,  ANIMATION_SPEED/10));\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\n      if(STOP == true){\n        arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n        return;\n      }\n    }\n    arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n    arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n\n    this.swap(arr, i, q);\n    return q;\n  }\n\n  async quickSortHelper(arr, low, high){\n    if (low < high) {\n        let pivot = await this.partition(arr, low, high);\n\n        //const arrayBars = document.getElementsByClassName('array-bar');\n        //arrayBars[pivot].style.backgroundColor = SECONDARY_COLOR;\n        //await new Promise(r => setTimeout(r,  ANIMATION_SPEED*10));\n        //arrayBars[pivot].style.backgroundColor = PRIMARY_COLOR;\n        if(STOP == true){\n          // RUNNING = false;\n          return;\n        }\n        await this.quickSortHelper(arr, low, pivot - 1);\n        await this.quickSortHelper(arr, pivot + 1, high);\n        return arr;\n    }\n  }\n\nasync quickSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n    STOP = false;\n\n\n    let array = this.state.array;\n    let length = array.length;\n    await this.quickSortHelper(array, 0, length-1);\n\n    STOP = false;\n    RUNNING = false;\n}\n\nasync heapify(heap, i, max) {\n    var index, leftChild, righChild;\n\n    while(i < max) {\n      index = i;\n\n      leftChild = 2*i + 1;\n      righChild = leftChild + 1;\n\n      if (leftChild < max && heap[leftChild] > heap[index]) {\n        index = leftChild;\n      }\n\n      if (righChild < max && heap[righChild] > heap[index]) {\n        index = righChild;\n      }\n\n      if (index == i) {\n        return;\n      }\n\n      arrayBars[i].style.backgroundColor = SECONDARY_COLOR;\n      arrayBars[index].style.backgroundColor = SECONDARY_COLOR;\n      await new Promise(r => setTimeout(r,  ANIMATION_SPEED/2));\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n      arrayBars[index].style.backgroundColor = PRIMARY_COLOR;\n      this.swap(heap,i, index);\n\n      i = index;\n\n      if(STOP == true)\n        return;\n\n  }\n}\n\nasync buildMaxHeap(array) {\n    var i;\n    i = array.length / 2 - 1;\n    i = Math.floor(i);\n\n    // Build a max heap out of\n    // all array elements passed in.\n    while (i >= 0) {\n      await this.heapify(array, i, array.length);\n      i -= 1;\n      if(STOP == true)\n        return;\n    }\n}\n\nasync heapSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n    STOP = false;\n\n\n    let array = this.state.array;\n    // Build our max heap.\n    await this.buildMaxHeap(array);\n\n    // Find last element.\n    let lastElement = array.length - 1;\n\n    // Continue heap sorting until we have\n    // just one element left in the array.\n    while(lastElement > 0) {\n      this.swap(array, 0, lastElement);\n\n      await this.heapify(array, 0, lastElement);\n\n      lastElement -= 1\n\n      if(STOP == true)\n        break;\n    }\n\n    STOP = false;\n    RUNNING = false;\n}\n\n\nasync bubbleSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n    STOP = false;\n\n    let array = this.state.array;\n    let sorted = true;\n\n    for(let i = 0; i<array.length - 1; i++){\n      for(let j = 0; j<array.length- i-1; j++){\n          //let arrayBars = document.getElementsByClassName('array-bar');\n          arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/30));\n\n          if(array[j] > array[j+1]){\n            sorted = false;\n            let temp = array[j];\n            array[j] = array [j+1];\n            array[j+1] = temp;\n            arrayBars[j].style.height = `${array[j]}px`;\n            arrayBars[j+1].style.height = `${array[j+1]}px`;\n          }\n          arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = PRIMARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/30));\n\n        if(STOP == true){\n          STOP = false;\n          RUNNING = false;\n          return;\n          }\n        }\n        if(sorted == true){\n          break;\n        }\n    }\n    RUNNING = false;\n}\n\nstop(){\n  STOP = !STOP;\n}\n\n\nrender() {\n  const {array} = this.state;\n\n  return (\n    <div className=\"array-container\">\n    <div className = \"button-container\">\n      <Button onClick={() => this.resetArray()} type=\"button\"\n      buttonStyle=\"btn--success--solid\"\n      buttonSize=\"btn--medium\">Generate New Array</Button>\n\n      <Button onClick={() => this.mergeSort()} type=\"button\"\n      buttonStyle=\"btn--primary--outline\"\n      buttonSize=\"btn--medium\">Merge Sort</Button>\n\n      <Button onClick={() => this.quickSort()} type=\"button\"\n      buttonStyle=\"btn--primary--outline\"\n      buttonSize=\"btn--medium\">Quick Sort</Button>\n\n      <Button onClick={() => this.heapSort()} type=\"button\"\n      buttonStyle=\"btn--primary--outline\"\n      buttonSize=\"btn--medium\">Heap Sort</Button>\n\n      <Button onClick={() => this.bubbleSort()} type=\"button\"\n      buttonStyle=\"btn--primary--outline\"\n      buttonSize=\"btn--medium\">Bubble Sort</Button>\n\n      <Button onClick={() => this.stop()} type=\"button\"\n      buttonStyle=\"btn--danger--solid\"\n      buttonSize=\"btn--medium\">Stop</Button>\n      </div>\n\n      {array.map((value, idx) => (\n        <div\n          className=\"array-bar\"\n          key={idx}\n          style={{\n            backgroundColor: PRIMARY_COLOR,\n            height: `${value}px`,\n          }}></div>\n      ))}\n\n    </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
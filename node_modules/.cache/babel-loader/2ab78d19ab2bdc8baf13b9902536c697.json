{"ast":null,"code":"var _jsxFileName = \"/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css'; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 100; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red'; //animation speed\n\nlet ANIMATION_SPEED = 30;\nlet STOP = false;\nlet RUNNING = false;\nconst arrayBars = document.getElementsByClassName('array-bar'); //\n// function partition(arr,  low,  high){\n//           let pivot = arr[high];\n//\n//           // index of smaller element\n//           let i = (low - 1);\n//           for (let j = low; j <= high - 1; j++) {\n//               // If current element is smaller than or\n//               // equal to pivot\n//               if (arr[j] <= pivot) {\n//                   i++;\n//\n//                   // swap arr[i] and arr[j]\n//                   let temp = arr[i];\n//                   arr[i] = arr[j];\n//                   arr[j] = temp;\n//               }\n//           }\n//\n//           // swap arr[i+1] and arr[high] (or pivot)\n//           let temp = arr[i + 1];\n//           arr[i + 1] = arr[high];\n//           arr[high] = temp;\n//\n//           return i + 1;\n//   }\n//\n//   /* A[] --> Array to be sorted,\n//   l  --> Starting index,\n//   h  --> Ending index */\n//   function quickSortIterative(arr,  l,  h){\n//           // Create an auxiliary stack\n//           let stack = new Array(h - l + 1);\n//\n//           // initialize top of stack\n//           let top = -1;\n//\n//           // push initial values of l and h to stack\n//           stack[++top] = l;\n//           stack[++top] = h;\n//\n//           // Keep popping from stack while is not empty\n//           while (top >= 0) {\n//               // Pop h and l\n//               h = stack[top--];\n//               l = stack[top--];\n//\n//               // Set pivot element at its correct position\n//               // in sorted array\n//               let p = partition(arr, l, h);\n//\n//               // If there are elements on left side of pivot,\n//               // then push left side to stack\n//               if (p - 1 > l) {\n//                   stack[++top] = l;\n//                   stack[++top] = p - 1;\n//               }\n//\n//               // If there are elements on right side of pivot,\n//               // then push right side to stack\n//               if (p + 1 < h) {\n//                   stack[++top] = p + 1;\n//                   stack[++top] = h;\n//               }\n//           }\n//   }\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props); //storage, so is global variable allowed?\n\n    this.state = {\n      array: []\n    };\n  } //load for the first time, or refresh page\n\n\n  componentDidMount() {\n    this.resetArray();\n    STOP = false;\n  } //reset the array with new values, the same functio that is\n\n\n  resetArray() {\n    // console.log(\"Entered resetArray\")\n    STOP = true;\n    RUNNING = false;\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    } //create new array, replace the previous one\n\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      //const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2; //either the first pair or the third pair\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(function () {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(function () {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED);\n\n        if (STOP == true) {\n          STOP = false;\n          RUNNING = false;\n          return;\n        }\n      }\n    }\n  }\n\n  swap(arr, i, j) {\n    let tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp; //let arrayBars = document.getElementsByClassName('array-bar');\n\n    arrayBars[i].style.height = `${arr[i]}px`;\n    arrayBars[j].style.height = `${arr[j]}px`;\n  }\n\n  partition(arr, low, high) {\n    let q = low;\n    let i = 0;\n\n    for (i = low; i < high; i++) {\n      if (arr[i] < arr[high]) {\n        this.swap(arr, i, q);\n        q++;\n      }\n    }\n\n    this.swap(arr, i, q);\n    return q;\n  }\n\n  async quickSortHelper(arr, low, high) {\n    if (low < high) {\n      let pivot = this.partition(arr, low, high); //const arrayBars = document.getElementsByClassName('array-bar');\n\n      arrayBars[pivot].style.backgroundColor = SECONDARY_COLOR;\n      await new Promise(r => setTimeout(r, ANIMATION_SPEED * 10));\n      arrayBars[pivot].style.backgroundColor = PRIMARY_COLOR;\n\n      if (STOP == true) {\n        RUNNING = false;\n        return;\n      }\n\n      this.quickSortHelper(arr, low, pivot - 1);\n      this.quickSortHelper(arr, pivot + 1, high);\n      return arr;\n    }\n  }\n\n  quickSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    let array = this.state.array;\n    let length = array.length;\n    this.quickSortHelper(array, 0, length - 1);\n    STOP = false;\n    RUNNING = false;\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  async bubbleSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    let array = this.state.array;\n    let sorted = true;\n\n    for (let i = 0; i < array.length - 1; i++) {\n      for (let j = 0; j < array.length - i - 1; j++) {\n        //let arrayBars = document.getElementsByClassName('array-bar');\n        arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n        arrayBars[j + 1].style.backgroundColor = SECONDARY_COLOR;\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED));\n\n        if (array[j] > array[j + 1]) {\n          sorted = false;\n          let temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n          arrayBars[j].style.height = `${array[j]}px`;\n          arrayBars[j + 1].style.height = `${array[j + 1]}px`;\n        }\n\n        arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[j + 1].style.backgroundColor = PRIMARY_COLOR;\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED / 5));\n\n        if (STOP == true) {\n          STOP = false;\n          RUNNING = false;\n          return;\n        }\n      }\n\n      if (sorted == true) {\n        break;\n      }\n    }\n\n    RUNNING = false;\n  }\n\n  stop() {\n    // console.log(\"Entered stop toggle\")\n    STOP = !STOP;\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 7\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.stop(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }\n    }, \"Stop\"));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED","STOP","RUNNING","arrayBars","document","getElementsByClassName","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","swap","arr","j","tmp","partition","low","high","q","quickSortHelper","pivot","Promise","r","quickSort","heapSort","bubbleSort","sorted","temp","stop","render","map","value","idx","min","max","Math","floor","random","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css';\n\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n//animation speed\nlet ANIMATION_SPEED = 30;\n\nlet STOP = false;\nlet RUNNING = false;\nconst arrayBars = document.getElementsByClassName('array-bar');\n\n//\n// function partition(arr,  low,  high){\n//           let pivot = arr[high];\n//\n//           // index of smaller element\n//           let i = (low - 1);\n//           for (let j = low; j <= high - 1; j++) {\n//               // If current element is smaller than or\n//               // equal to pivot\n//               if (arr[j] <= pivot) {\n//                   i++;\n//\n//                   // swap arr[i] and arr[j]\n//                   let temp = arr[i];\n//                   arr[i] = arr[j];\n//                   arr[j] = temp;\n//               }\n//           }\n//\n//           // swap arr[i+1] and arr[high] (or pivot)\n//           let temp = arr[i + 1];\n//           arr[i + 1] = arr[high];\n//           arr[high] = temp;\n//\n//           return i + 1;\n//   }\n//\n//   /* A[] --> Array to be sorted,\n//   l  --> Starting index,\n//   h  --> Ending index */\n//   function quickSortIterative(arr,  l,  h){\n//           // Create an auxiliary stack\n//           let stack = new Array(h - l + 1);\n//\n//           // initialize top of stack\n//           let top = -1;\n//\n//           // push initial values of l and h to stack\n//           stack[++top] = l;\n//           stack[++top] = h;\n//\n//           // Keep popping from stack while is not empty\n//           while (top >= 0) {\n//               // Pop h and l\n//               h = stack[top--];\n//               l = stack[top--];\n//\n//               // Set pivot element at its correct position\n//               // in sorted array\n//               let p = partition(arr, l, h);\n//\n//               // If there are elements on left side of pivot,\n//               // then push left side to stack\n//               if (p - 1 > l) {\n//                   stack[++top] = l;\n//                   stack[++top] = p - 1;\n//               }\n//\n//               // If there are elements on right side of pivot,\n//               // then push right side to stack\n//               if (p + 1 < h) {\n//                   stack[++top] = p + 1;\n//                   stack[++top] = h;\n//               }\n//           }\n//   }\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n//storage, so is global variable allowed?\n  this.state = {\n      array: [],\n    };\n  }\n\n//load for the first time, or refresh page\n  componentDidMount() {\n    this.resetArray();\n    STOP = false;\n  }\n\n//reset the array with new values, the same functio that is\n  resetArray() {\n    // console.log(\"Entered resetArray\")\n    STOP = true;\n    RUNNING = false;\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    }\n    //create new array, replace the previous one\n    this.setState({array});\n  }\n\n  mergeSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      //const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2; //either the first pair or the third pair\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        setTimeout(function(){\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(function(){\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED);\n\n        if(STOP == true){\n          STOP = false;\n          RUNNING = false;\n          return;\n        }\n      }\n    }\n  }\n\n  swap (arr, i, j){\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n\n      //let arrayBars = document.getElementsByClassName('array-bar');\n      arrayBars[i].style.height = `${arr[i]}px`;\n      arrayBars[j].style.height = `${arr[j]}px`;\n  }\n\n   partition (arr, low, high){\n      let q = low;\n      let i = 0;\n      for (i = low; i < high; i++) {\n\n          if (arr[i] < arr[high]) {\n              this.swap(arr, i, q);\n              q++;\n          }\n      }\n      this.swap(arr, i, q);\n      return q;\n  }\n\n  async quickSortHelper(arr, low, high){\n      if (low < high) {\n          let pivot = this.partition(arr, low, high);\n\n          //const arrayBars = document.getElementsByClassName('array-bar');\n          arrayBars[pivot].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED*10));\n          arrayBars[pivot].style.backgroundColor = PRIMARY_COLOR;\n          if(STOP == true){\n            RUNNING = false;\n            return;\n          }\n          this.quickSortHelper(arr, low, pivot - 1);\n          this.quickSortHelper(arr, pivot + 1, high);\n          return arr;\n      }\n  }\n\n  quickSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n    let array = this.state.array;\n    let length = array.length;\n    this.quickSortHelper(array, 0, length-1);\n    STOP = false;\n    RUNNING = false;\n\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n\n  async bubbleSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n\n    let array = this.state.array;\n    let sorted = true;\n\n    for(let i = 0; i<array.length - 1; i++){\n      for(let j = 0; j<array.length- i-1; j++){\n          //let arrayBars = document.getElementsByClassName('array-bar');\n          arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED));\n\n          if(array[j] > array[j+1]){\n            sorted = false;\n            let temp = array[j];\n            array[j] = array [j+1];\n            array[j+1] = temp;\n            arrayBars[j].style.height = `${array[j]}px`;\n            arrayBars[j+1].style.height = `${array[j+1]}px`;\n          }\n          arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = PRIMARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n\n        if(STOP == true){\n          STOP = false;\n          RUNNING = false;\n          return;\n          }\n        }\n        if(sorted == true){\n          break;\n        }\n    }\n    RUNNING = false;\n  }\n\n  stop(){\n    // console.log(\"Entered stop toggle\")\n    STOP = !STOP;\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.stop()}>Stop</button>\n\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}
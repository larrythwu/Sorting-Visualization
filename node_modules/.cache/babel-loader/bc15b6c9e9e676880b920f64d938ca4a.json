{"ast":null,"code":"var _jsxFileName = \"/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 10; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 100; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red'; //animation speed\n\nlet WAIT_TIME = 100;\nlet RUN = true;\nlet RUNNING = false;\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props); //storage, so is global variable allowed?\n\n    this.state = {\n      array: []\n    };\n  } //load for the first time, or refresh page\n\n\n  componentDidMount() {\n    this.resetArray();\n  } //reset the array with new values, the same functio that is\n\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    } //create new array, replace the previous one\n\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    if (RUNNING = true) return;\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2; //either the first pair or the third pair\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(function () {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(function () {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  async bubbleSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    let array = this.state.array;\n\n    for (let i = 0; i < array.length - 1; i++) {\n      for (let j = 0; j < array.length - i - 1; j++) {\n        let arrayBars = document.getElementsByClassName('array-bar');\n        arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n        arrayBars[j + 1].style.backgroundColor = SECONDARY_COLOR;\n\n        if (array[j] > array[j + 1]) {\n          let temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n          await new Promise(r => setTimeout(r, WAIT_TIME));\n          arrayBars[j].style.height = `${array[j]}px`;\n          arrayBars[j + 1].style.height = `${array[j + 1]}px`;\n        }\n\n        arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[j + 1].style.backgroundColor = PRIMARY_COLOR;\n        await new Promise(r => setTimeout(r, WAIT_TIME / 5));\n\n        if (RUN == false) {\n          RUN = true;\n          RUNNING = false;\n          return;\n        }\n      }\n    }\n  }\n\n  stop() {\n    RUN = !RUN;\n  } // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.stop(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, \"Stop\"));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","WAIT_TIME","RUN","RUNNING","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","heapSort","bubbleSort","j","temp","Promise","r","stop","testSortingAlgorithms","javaScriptSortedArray","slice","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","render","map","value","idx","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,sBAAR,QAAqC,2CAArC;AACA,OAAO,yBAAP,C,CAEA;;AACA,MAAMC,kBAAkB,GAAG,EAA3B,C,CAEA;;AACA,MAAMC,oBAAoB,GAAG,GAA7B,C,CAEA;;AACA,MAAMC,aAAa,GAAG,WAAtB,C,CAEA;;AACA,MAAMC,eAAe,GAAG,KAAxB,C,CAEA;;AACA,IAAIC,SAAS,GAAG,GAAhB;AAEA,IAAIC,GAAG,GAAG,IAAV;AACA,IAAIC,OAAO,GAAG,KAAd;AAEA,eAAe,MAAMC,iBAAN,SAAgCT,KAAK,CAACU,SAAtC,CAAgD;AAC7DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGrB;;AACI,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD,GAR4D,CAU/D;;;AACEC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACD,GAb4D,CAe/D;;;AACEA,EAAAA,UAAU,GAAG;AACX,UAAMF,KAAK,GAAG,EAAd;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,oBAApB,EAA0Cc,CAAC,EAA3C,EAA+C;AAC7C;AACAH,MAAAA,KAAK,CAACI,IAAN,CAAWC,qBAAqB,CAAC,EAAD,EAAK,GAAL,CAAhC;AACD,KALU,CAMX;;;AACA,SAAKC,QAAL,CAAc;AAACN,MAAAA;AAAD,KAAd;AACD;;AAEDO,EAAAA,SAAS,GAAG;AACV,QAAGb,OAAO,GAAG,IAAb,EACE;AAEF,UAAMc,UAAU,GAAGrB,sBAAsB,CAAC,KAAKY,KAAL,CAAWC,KAAZ,CAAzC;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,UAAU,CAACC,MAA/B,EAAuCN,CAAC,EAAxC,EAA4C;AAC1C,YAAMO,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAlB;AACA,YAAMC,aAAa,GAAGV,CAAC,GAAG,CAAJ,KAAU,CAAhC,CAF0C,CAEP;;AACnC,UAAIU,aAAJ,EAAmB;AACjB,cAAM,CAACC,SAAD,EAAYC,SAAZ,IAAyBP,UAAU,CAACL,CAAD,CAAzC;AACA,cAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACA,cAAMC,WAAW,GAAGR,SAAS,CAACK,SAAD,CAAT,CAAqBE,KAAzC;AACA,cAAME,KAAK,GAAGhB,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcZ,eAAd,GAAgCD,aAA9C;AAEA8B,QAAAA,UAAU,CAAC,YAAU;AACnBJ,UAAAA,WAAW,CAACK,eAAZ,GAA8BF,KAA9B;AACAD,UAAAA,WAAW,CAACG,eAAZ,GAA8BF,KAA9B;AACD,SAHS,EAGPhB,CAAC,GAAGf,kBAHG,CAAV;AAID,OAVD,MAUO;AACLgC,QAAAA,UAAU,CAAC,YAAU;AACnB,gBAAM,CAACN,SAAD,EAAYQ,SAAZ,IAAyBd,UAAU,CAACL,CAAD,CAAzC;AACA,gBAAMa,WAAW,GAAGN,SAAS,CAACI,SAAD,CAAT,CAAqBG,KAAzC;AACAD,UAAAA,WAAW,CAACO,MAAZ,GAAsB,GAAED,SAAU,IAAlC;AACD,SAJS,EAIPnB,CAAC,GAAGf,kBAJG,CAAV;AAKD;AACF;AACF;;AAEDoC,EAAAA,SAAS,GAAG,CACV;AACD;;AAEDC,EAAAA,QAAQ,GAAG,CACT;AACD;;AAID,QAAMC,UAAN,GAAmB;AACjB,QAAGhC,OAAO,IAAI,IAAd,EACE,OADF,KAGEA,OAAO,GAAG,IAAV;AAGF,QAAIM,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;;AACA,SAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACH,KAAK,CAACS,MAAN,GAAe,CAAhC,EAAmCN,CAAC,EAApC,EAAuC;AACrC,WAAI,IAAIwB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAC3B,KAAK,CAACS,MAAN,GAAcN,CAAd,GAAgB,CAAjC,EAAoCwB,CAAC,EAArC,EAAwC;AACpC,YAAIjB,SAAS,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,WAAhC,CAAhB;AACAF,QAAAA,SAAS,CAACiB,CAAD,CAAT,CAAaV,KAAb,CAAmBI,eAAnB,GAAqC9B,eAArC;AACAmB,QAAAA,SAAS,CAACiB,CAAC,GAAC,CAAH,CAAT,CAAeV,KAAf,CAAqBI,eAArB,GAAuC9B,eAAvC;;AAEA,YAAGS,KAAK,CAAC2B,CAAD,CAAL,GAAW3B,KAAK,CAAC2B,CAAC,GAAC,CAAH,CAAnB,EAAyB;AACvB,cAAIC,IAAI,GAAG5B,KAAK,CAAC2B,CAAD,CAAhB;AACA3B,UAAAA,KAAK,CAAC2B,CAAD,CAAL,GAAW3B,KAAK,CAAE2B,CAAC,GAAC,CAAJ,CAAhB;AACA3B,UAAAA,KAAK,CAAC2B,CAAC,GAAC,CAAH,CAAL,GAAaC,IAAb;AACA,gBAAM,IAAIC,OAAJ,CAAYC,CAAC,IAAIV,UAAU,CAACU,CAAD,EAAKtC,SAAL,CAA3B,CAAN;AACAkB,UAAAA,SAAS,CAACiB,CAAD,CAAT,CAAaV,KAAb,CAAmBM,MAAnB,GAA6B,GAAEvB,KAAK,CAAC2B,CAAD,CAAI,IAAxC;AACAjB,UAAAA,SAAS,CAACiB,CAAC,GAAC,CAAH,CAAT,CAAeV,KAAf,CAAqBM,MAArB,GAA+B,GAAEvB,KAAK,CAAC2B,CAAC,GAAC,CAAH,CAAM,IAA5C;AACD;;AACDjB,QAAAA,SAAS,CAACiB,CAAD,CAAT,CAAaV,KAAb,CAAmBI,eAAnB,GAAqC/B,aAArC;AACAoB,QAAAA,SAAS,CAACiB,CAAC,GAAC,CAAH,CAAT,CAAeV,KAAf,CAAqBI,eAArB,GAAuC/B,aAAvC;AACA,cAAM,IAAIuC,OAAJ,CAAYC,CAAC,IAAIV,UAAU,CAACU,CAAD,EAAKtC,SAAS,GAAC,CAAf,CAA3B,CAAN;;AAEA,YAAGC,GAAG,IAAI,KAAV,EAAgB;AACdA,UAAAA,GAAG,GAAG,IAAN;AACAC,UAAAA,OAAO,GAAG,KAAV;AACA;AACD;AACF;AACJ;AACF;;AAEDqC,EAAAA,IAAI,GAAE;AACJtC,IAAAA,GAAG,GAAG,CAACA,GAAP;AACD,GArG4D,CAuG7D;AACA;AACA;;;AACAuC,EAAAA,qBAAqB,GAAG;AACtB,SAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5B,YAAMH,KAAK,GAAG,EAAd;AACA,YAAMS,MAAM,GAAGJ,qBAAqB,CAAC,CAAD,EAAI,IAAJ,CAApC;;AACA,WAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,MAApB,EAA4BN,CAAC,EAA7B,EAAiC;AAC/BH,QAAAA,KAAK,CAACI,IAAN,CAAWC,qBAAqB,CAAC,CAAC,IAAF,EAAQ,IAAR,CAAhC;AACD;;AACD,YAAM4B,qBAAqB,GAAGjC,KAAK,CAACkC,KAAN,GAAcC,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAjC,CAA9B;AACA,YAAMC,gBAAgB,GAAGnD,sBAAsB,CAACa,KAAK,CAACkC,KAAN,EAAD,CAA/C;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYC,cAAc,CAACR,qBAAD,EAAwBK,gBAAxB,CAA1B;AACD;AACF;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAC1C,MAAAA;AAAD,QAAU,KAAKD,KAArB;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,KAAK,CAAC2C,GAAN,CAAU,CAACC,KAAD,EAAQC,GAAR,kBACT;AACE,MAAA,SAAS,EAAC,WADZ;AAEE,MAAA,GAAG,EAAEA,GAFP;AAGE,MAAA,KAAK,EAAE;AACLxB,QAAAA,eAAe,EAAE/B,aADZ;AAELiC,QAAAA,MAAM,EAAG,GAAEqB,KAAM;AAFZ,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,eAWE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAK1C,UAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAXF,eAYE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKK,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAZF,eAaE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKiB,SAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAbF,eAcE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKC,QAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAdF,eAeE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKC,UAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAfF,eAgBE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKK,IAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBF,CADF;AAqBD;;AA/I4D,C,CAkJ/D;;AACA,SAAS1B,qBAAT,CAA+ByC,GAA/B,EAAoCC,GAApC,EAAyC;AACvC;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;;AAED,SAASL,cAAT,CAAwBU,QAAxB,EAAkCC,QAAlC,EAA4C;AAC1C,MAAID,QAAQ,CAAC1C,MAAT,KAAoB2C,QAAQ,CAAC3C,MAAjC,EAAyC,OAAO,KAAP;;AACzC,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgD,QAAQ,CAAC1C,MAA7B,EAAqCN,CAAC,EAAtC,EAA0C;AACxC,QAAIgD,QAAQ,CAAChD,CAAD,CAAR,KAAgBiD,QAAQ,CAACjD,CAAD,CAA5B,EAAiC;AAC/B,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 10;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n//animation speed\nlet WAIT_TIME = 100;\n\nlet RUN = true;\nlet RUNNING = false;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n//storage, so is global variable allowed?\n    this.state = {\n      array: [],\n    };\n  }\n\n//load for the first time, or refresh page\n  componentDidMount() {\n    this.resetArray();\n  }\n\n//reset the array with new values, the same functio that is\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    }\n    //create new array, replace the previous one\n    this.setState({array});\n  }\n\n  mergeSort() {\n    if(RUNNING = true)\n      return;\n\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2; //either the first pair or the third pair\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        setTimeout(function(){\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(function(){\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n\n\n  async bubbleSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n\n    let array = this.state.array;\n    for(let i = 0; i<array.length - 1; i++){\n      for(let j = 0; j<array.length- i-1; j++){\n          let arrayBars = document.getElementsByClassName('array-bar');\n          arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\n\n          if(array[j] > array[j+1]){\n            let temp = array[j];\n            array[j] = array [j+1];\n            array[j+1] = temp;\n            await new Promise(r => setTimeout(r,  WAIT_TIME));\n            arrayBars[j].style.height = `${array[j]}px`;\n            arrayBars[j+1].style.height = `${array[j+1]}px`;\n          }\n          arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = PRIMARY_COLOR;\n          await new Promise(r => setTimeout(r,  WAIT_TIME/5));\n\n          if(RUN == false){\n            RUN = true;\n            RUNNING = false;\n            return;\n          }\n        }\n    }\n  }\n\n  stop(){\n    RUN = !RUN;\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.stop()}>Stop</button>\n\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}
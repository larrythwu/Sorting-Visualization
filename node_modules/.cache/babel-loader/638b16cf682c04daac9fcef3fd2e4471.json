{"ast":null,"code":"var _jsxFileName = \"/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css';\nimport { Button } from '../components/Button.jsx'; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 100; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red'; //animation speed ms\n\nlet ANIMATION_SPEED = 30; //stop a certain sorting process\n\nlet STOP = false; //indicate if a sorting is already running\n\nlet RUNNING = false; //current array\n\nconst arrayBars = document.getElementsByClassName('array-bar');\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  } //load for the first time, or refresh page\n\n\n  componentDidMount() {\n    this.resetArray();\n    STOP = false;\n  } //reset the array with new values, the same functio that is\n\n\n  resetArray() {\n    // console.log(\"Entered resetArray\")\n    STOP = true;\n    RUNNING = false;\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    } //create new array, replace the previous one\n\n\n    this.setState({\n      array\n    });\n  } // Merge the two arrays: left and right\n\n\n  async merge(left, right) {\n    let resultArray = [],\n        leftIndex = 0,\n        rightIndex = 0; // We will concatenate values into the resultArray in order\n\n    while (leftIndex < left.length && rightIndex < right.length) {\n      if (left[leftIndex] < right[rightIndex]) {\n        resultArray.push(left[leftIndex]);\n        leftIndex++; // move left array cursor\n      } else {\n        resultArray.push(right[rightIndex]);\n        rightIndex++; // move right array cursor\n      } //await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n\n    } // We need to concat here because there will be one element remaining\n    // from either left OR the right\n\n\n    return resultArray.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n  } // Merge Sort Implentation (Recursion)\n\n\n  async merge_sort(unsortedArray) {\n    // No need to sort the array if the array only has one element or empty\n    if (unsortedArray.length <= 1) {\n      return unsortedArray;\n    } // In order to divide the array in half, we need to figure out the middle\n\n\n    const middle = Math.floor(unsortedArray.length / 2); // This is where we will be dividing the array into left and right\n\n    const left = unsortedArray.slice(0, middle);\n    const right = unsortedArray.slice(middle); // Using recursion to combine the left and right\n\n    return await this.merge(await this.merge_sort(left), await this.merge_sort(right));\n  }\n\n  async mergeSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    STOP = false;\n    this.state.array = await this.merge_sort(this.state.array);\n    console.log(this.state.array);\n  }\n\n  swap(arr, i, j) {\n    let tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp; //let arrayBars = document.getElementsByClassName('array-bar');\n\n    arrayBars[i].style.height = `${arr[i]}px`;\n    arrayBars[j].style.height = `${arr[j]}px`;\n  }\n\n  async partition(arr, low, high) {\n    let q = low;\n    let i = 0;\n    arrayBars[high].style.backgroundColor = 'green';\n\n    for (i = low; i < high; i++) {\n      arrayBars[i].style.backgroundColor = SECONDARY_COLOR;\n      arrayBars[q].style.backgroundColor = 'blue';\n\n      if (arr[i] < arr[high]) {\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED / 10));\n        arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n        this.swap(arr, i, q);\n        q++;\n      }\n\n      await new Promise(r => setTimeout(r, ANIMATION_SPEED / 10));\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\n      if (STOP == true) {\n        arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n        return;\n      }\n    }\n\n    arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n    arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n    this.swap(arr, i, q);\n    return q;\n  }\n\n  async quickSortHelper(arr, low, high) {\n    if (low < high) {\n      let pivot = await this.partition(arr, low, high); //const arrayBars = document.getElementsByClassName('array-bar');\n      //arrayBars[pivot].style.backgroundColor = SECONDARY_COLOR;\n      //await new Promise(r => setTimeout(r,  ANIMATION_SPEED*10));\n      //arrayBars[pivot].style.backgroundColor = PRIMARY_COLOR;\n\n      if (STOP == true) {\n        RUNNING = false;\n        return;\n      }\n\n      await this.quickSortHelper(arr, low, pivot - 1);\n      await this.quickSortHelper(arr, pivot + 1, high);\n      return arr;\n    }\n  }\n\n  async quickSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    STOP = false;\n    let array = this.state.array;\n    let length = array.length;\n    await this.quickSortHelper(array, 0, length - 1);\n    STOP = false;\n    RUNNING = false;\n  }\n\n  heapSort() {}\n\n  async bubbleSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    STOP = false;\n    let array = this.state.array;\n    let sorted = true;\n\n    for (let i = 0; i < array.length - 1; i++) {\n      for (let j = 0; j < array.length - i - 1; j++) {\n        //let arrayBars = document.getElementsByClassName('array-bar');\n        arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n        arrayBars[j + 1].style.backgroundColor = SECONDARY_COLOR;\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED));\n\n        if (array[j] > array[j + 1]) {\n          sorted = false;\n          let temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n          arrayBars[j].style.height = `${array[j]}px`;\n          arrayBars[j + 1].style.height = `${array[j + 1]}px`;\n        }\n\n        arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[j + 1].style.backgroundColor = PRIMARY_COLOR;\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED / 5));\n\n        if (STOP == true) {\n          STOP = false;\n          RUNNING = false;\n          return;\n        }\n      }\n\n      if (sorted == true) {\n        break;\n      }\n    }\n\n    RUNNING = false;\n  }\n\n  stop() {\n    // console.log(\"Entered stop toggle\")\n    STOP = !STOP;\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.resetArray(),\n      type: \"button\",\n      buttonStyle: \"btn--success--solid\",\n      buttonSize: \"btn--medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.mergeSort(),\n      type: \"button\",\n      buttonStyle: \"btn--primary--outline\",\n      buttonSize: \"btn--medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.quickSort(),\n      type: \"button\",\n      buttonStyle: \"btn--primary--outline\",\n      buttonSize: \"btn--medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.heapSort(),\n      type: \"button\",\n      buttonStyle: \"btn--primary--outline\",\n      buttonSize: \"btn--medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.bubbleSort(),\n      type: \"button\",\n      buttonStyle: \"btn--primary--outline\",\n      buttonSize: \"btn--medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.stop(),\n      type: \"button\",\n      buttonStyle: \"btn--danger--solid\",\n      buttonSize: \"btn--medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }\n    }, \"Stop\")), array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }\n    })));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","Button","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED","STOP","RUNNING","arrayBars","document","getElementsByClassName","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","merge","left","right","resultArray","leftIndex","rightIndex","length","concat","slice","merge_sort","unsortedArray","middle","Math","floor","mergeSort","console","log","swap","arr","j","tmp","style","height","partition","low","high","q","backgroundColor","Promise","r","setTimeout","quickSortHelper","pivot","quickSort","heapSort","bubbleSort","sorted","temp","stop","render","map","value","idx","min","max","random","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css';\nimport {Button} from '../components/Button.jsx'\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n//animation speed ms\nlet ANIMATION_SPEED = 30;\n\n//stop a certain sorting process\nlet STOP = false;\n\n//indicate if a sorting is already running\nlet RUNNING = false;\n\n\n//current array\nconst arrayBars = document.getElementsByClassName('array-bar');\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n  this.state = {\n      array: [],\n    };\n  }\n\n//load for the first time, or refresh page\n  componentDidMount() {\n    this.resetArray();\n    STOP = false;\n  }\n\n//reset the array with new values, the same functio that is\n  resetArray() {\n    // console.log(\"Entered resetArray\")\n    STOP = true;\n    RUNNING = false;\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    }\n    //create new array, replace the previous one\n    this.setState({array});\n  }\n\n\n  // Merge the two arrays: left and right\n async merge (left, right) {\n  let resultArray = [], leftIndex = 0, rightIndex = 0;\n\n  // We will concatenate values into the resultArray in order\n  while (leftIndex < left.length && rightIndex < right.length) {\n    if (left[leftIndex] < right[rightIndex]) {\n      resultArray.push(left[leftIndex]);\n      leftIndex++; // move left array cursor\n    } else {\n      resultArray.push(right[rightIndex]);\n      rightIndex++; // move right array cursor\n    }\n\n    //await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n\n  }\n\n  // We need to concat here because there will be one element remaining\n  // from either left OR the right\n  return resultArray\n          .concat(left.slice(leftIndex))\n          .concat(right.slice(rightIndex));\n}\n\n  // Merge Sort Implentation (Recursion)\n async merge_sort (unsortedArray) {\n    // No need to sort the array if the array only has one element or empty\n    if (unsortedArray.length <= 1) {\n      return unsortedArray;\n    }\n    // In order to divide the array in half, we need to figure out the middle\n    const middle = Math.floor(unsortedArray.length / 2);\n\n    // This is where we will be dividing the array into left and right\n    const left = unsortedArray.slice(0, middle);\n    const right = unsortedArray.slice(middle);\n\n    // Using recursion to combine the left and right\n    return await this.merge(\n      await this.merge_sort (left), await this.merge_sort (right)\n    );\n  }\n\n\n  async mergeSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n    STOP = false;\n\n    this.state.array = await this.merge_sort(this.state.array);\n    console.log(this.state.array);\n  }\n\n swap (arr, i, j){\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n\n      //let arrayBars = document.getElementsByClassName('array-bar');\n      arrayBars[i].style.height = `${arr[i]}px`;\n      arrayBars[j].style.height = `${arr[j]}px`;\n  }\n\n   async partition (arr, low, high){\n      let q = low;\n      let i = 0;\n      arrayBars[high].style.backgroundColor = 'green';\n\n      for (i = low; i < high; i++) {\n        arrayBars[i].style.backgroundColor = SECONDARY_COLOR;\n        arrayBars[q].style.backgroundColor = 'blue';\n        if (arr[i] < arr[high]) {\n            await new Promise(r => setTimeout(r,  ANIMATION_SPEED/10));\n            arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n            this.swap(arr, i, q);\n            q++;\n        }\n        await new Promise(r => setTimeout(r,  ANIMATION_SPEED/10));\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\n        if(STOP == true){\n          arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n          return;\n        }\n      }\n      arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n      arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n\n      this.swap(arr, i, q);\n      return q;\n    }\n\n  async quickSortHelper(arr, low, high){\n      if (low < high) {\n          let pivot = await this.partition(arr, low, high);\n\n          //const arrayBars = document.getElementsByClassName('array-bar');\n          //arrayBars[pivot].style.backgroundColor = SECONDARY_COLOR;\n          //await new Promise(r => setTimeout(r,  ANIMATION_SPEED*10));\n          //arrayBars[pivot].style.backgroundColor = PRIMARY_COLOR;\n          if(STOP == true){\n            RUNNING = false;\n            return;\n          }\n          await this.quickSortHelper(arr, low, pivot - 1);\n          await this.quickSortHelper(arr, pivot + 1, high);\n          return arr;\n      }\n  }\n\n  async quickSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n    STOP = false;\n\n\n    let array = this.state.array;\n    let length = array.length;\n    await this.quickSortHelper(array, 0, length-1);\n\n    STOP = false;\n    RUNNING = false;\n  }\n\n  heapSort() {\n\n  }\n\n\n  async bubbleSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n    STOP = false;\n\n    let array = this.state.array;\n    let sorted = true;\n\n    for(let i = 0; i<array.length - 1; i++){\n      for(let j = 0; j<array.length- i-1; j++){\n          //let arrayBars = document.getElementsByClassName('array-bar');\n          arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED));\n\n          if(array[j] > array[j+1]){\n            sorted = false;\n            let temp = array[j];\n            array[j] = array [j+1];\n            array[j+1] = temp;\n            arrayBars[j].style.height = `${array[j]}px`;\n            arrayBars[j+1].style.height = `${array[j+1]}px`;\n          }\n          arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = PRIMARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n\n        if(STOP == true){\n          STOP = false;\n          RUNNING = false;\n          return;\n          }\n        }\n        if(sorted == true){\n          break;\n        }\n    }\n    RUNNING = false;\n  }\n\n  stop(){\n    // console.log(\"Entered stop toggle\")\n    STOP = !STOP;\n  }\n\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n      <div className = \"button-container\">\n        <Button onClick={() => this.resetArray()} type=\"button\"\n        buttonStyle=\"btn--success--solid\"\n        buttonSize=\"btn--medium\">Generate New Array</Button>\n\n        <Button onClick={() => this.mergeSort()} type=\"button\"\n        buttonStyle=\"btn--primary--outline\"\n        buttonSize=\"btn--medium\">Merge Sort</Button>\n\n        <Button onClick={() => this.quickSort()} type=\"button\"\n        buttonStyle=\"btn--primary--outline\"\n        buttonSize=\"btn--medium\">Quick Sort</Button>\n\n        <Button onClick={() => this.heapSort()} type=\"button\"\n        buttonStyle=\"btn--primary--outline\"\n        buttonSize=\"btn--medium\">Heap Sort</Button>\n\n        <Button onClick={() => this.bubbleSort()} type=\"button\"\n        buttonStyle=\"btn--primary--outline\"\n        buttonSize=\"btn--medium\">Bubble Sort</Button>\n\n        <Button onClick={() => this.stop()} type=\"button\"\n        buttonStyle=\"btn--danger--solid\"\n        buttonSize=\"btn--medium\">Stop</Button>\n        </div>\n\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n\n\n\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}
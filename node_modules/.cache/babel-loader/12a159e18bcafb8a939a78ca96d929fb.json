{"ast":null,"code":"var _jsxFileName = \"/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css'; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 100; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red'; //animation speed\n\nlet ANIMATION_SPEED = 30;\nlet RUN = true;\nlet RUNNING = false; //\n// function partition(arr,  low,  high){\n//           let pivot = arr[high];\n//\n//           // index of smaller element\n//           let i = (low - 1);\n//           for (let j = low; j <= high - 1; j++) {\n//               // If current element is smaller than or\n//               // equal to pivot\n//               if (arr[j] <= pivot) {\n//                   i++;\n//\n//                   // swap arr[i] and arr[j]\n//                   let temp = arr[i];\n//                   arr[i] = arr[j];\n//                   arr[j] = temp;\n//               }\n//           }\n//\n//           // swap arr[i+1] and arr[high] (or pivot)\n//           let temp = arr[i + 1];\n//           arr[i + 1] = arr[high];\n//           arr[high] = temp;\n//\n//           return i + 1;\n//   }\n//\n//   /* A[] --> Array to be sorted,\n//   l  --> Starting index,\n//   h  --> Ending index */\n//   function quickSortIterative(arr,  l,  h){\n//           // Create an auxiliary stack\n//           let stack = new Array(h - l + 1);\n//\n//           // initialize top of stack\n//           let top = -1;\n//\n//           // push initial values of l and h to stack\n//           stack[++top] = l;\n//           stack[++top] = h;\n//\n//           // Keep popping from stack while is not empty\n//           while (top >= 0) {\n//               // Pop h and l\n//               h = stack[top--];\n//               l = stack[top--];\n//\n//               // Set pivot element at its correct position\n//               // in sorted array\n//               let p = partition(arr, l, h);\n//\n//               // If there are elements on left side of pivot,\n//               // then push left side to stack\n//               if (p - 1 > l) {\n//                   stack[++top] = l;\n//                   stack[++top] = p - 1;\n//               }\n//\n//               // If there are elements on right side of pivot,\n//               // then push right side to stack\n//               if (p + 1 < h) {\n//                   stack[++top] = p + 1;\n//                   stack[++top] = h;\n//               }\n//           }\n//   }\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props); //storage, so is global variable allowed?\n\n    this.state = {\n      array: []\n    };\n  } //load for the first time, or refresh page\n\n\n  componentDidMount() {\n    this.resetArray();\n  } //reset the array with new values, the same functio that is\n\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    } //create new array, replace the previous one\n\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2; //either the first pair or the third pair\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(function () {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(function () {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED);\n\n        if (RUN == false) {\n          RUN = true;\n          RUNNING = false;\n          return;\n        }\n      }\n    }\n  }\n\n  quickSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    let arr = this.state.array;\n\n    let swap = (arr, i, j) => {\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      let arrayBars = document.getElementsByClassName('array-bar');\n      arrayBars[j].style.height = `${arr[j]}px`;\n      arrayBars[j + 1].style.height = `${arr[j + 1]}px`;\n    };\n\n    let partition = (arr, low, high) => {\n      let q = low,\n          i;\n\n      for (i = low; i < high; i++) {\n        if (arr[i] < arr[high]) {\n          swap(arr, i, q);\n          q++;\n        }\n      }\n\n      swap(arr, i, q);\n      return q;\n    };\n\n    let quickSort = (arr, low, high) => {\n      if (low < high) {\n        let pivot = partition(arr, low, high);\n        quickSort(arr, low, pivot - 1);\n        quickSort(arr, pivot + 1, high);\n        return arr;\n      }\n    };\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  async bubbleSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    let array = this.state.array;\n\n    for (let i = 0; i < array.length - 1; i++) {\n      for (let j = 0; j < array.length - i - 1; j++) {\n        let arrayBars = document.getElementsByClassName('array-bar');\n        arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n        arrayBars[j + 1].style.backgroundColor = SECONDARY_COLOR;\n\n        if (array[j] > array[j + 1]) {\n          let temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n          await new Promise(r => setTimeout(r, ANIMATION_SPEED));\n          arrayBars[j].style.height = `${array[j]}px`;\n          arrayBars[j + 1].style.height = `${array[j + 1]}px`;\n        }\n\n        arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[j + 1].style.backgroundColor = PRIMARY_COLOR;\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED / 5));\n\n        if (RUN == false) {\n          RUN = true;\n          RUNNING = false;\n          return;\n        }\n      }\n    }\n  }\n\n  stop() {\n    RUN = !RUN;\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.stop(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }\n    }, \"Stop\"));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED","RUN","RUNNING","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","arr","swap","j","tmp","partition","low","high","q","pivot","heapSort","bubbleSort","temp","Promise","r","stop","render","map","value","idx","min","max","Math","floor","random","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css';\n\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n//animation speed\nlet ANIMATION_SPEED = 30;\n\nlet RUN = true;\nlet RUNNING = false;\n//\n// function partition(arr,  low,  high){\n//           let pivot = arr[high];\n//\n//           // index of smaller element\n//           let i = (low - 1);\n//           for (let j = low; j <= high - 1; j++) {\n//               // If current element is smaller than or\n//               // equal to pivot\n//               if (arr[j] <= pivot) {\n//                   i++;\n//\n//                   // swap arr[i] and arr[j]\n//                   let temp = arr[i];\n//                   arr[i] = arr[j];\n//                   arr[j] = temp;\n//               }\n//           }\n//\n//           // swap arr[i+1] and arr[high] (or pivot)\n//           let temp = arr[i + 1];\n//           arr[i + 1] = arr[high];\n//           arr[high] = temp;\n//\n//           return i + 1;\n//   }\n//\n//   /* A[] --> Array to be sorted,\n//   l  --> Starting index,\n//   h  --> Ending index */\n//   function quickSortIterative(arr,  l,  h){\n//           // Create an auxiliary stack\n//           let stack = new Array(h - l + 1);\n//\n//           // initialize top of stack\n//           let top = -1;\n//\n//           // push initial values of l and h to stack\n//           stack[++top] = l;\n//           stack[++top] = h;\n//\n//           // Keep popping from stack while is not empty\n//           while (top >= 0) {\n//               // Pop h and l\n//               h = stack[top--];\n//               l = stack[top--];\n//\n//               // Set pivot element at its correct position\n//               // in sorted array\n//               let p = partition(arr, l, h);\n//\n//               // If there are elements on left side of pivot,\n//               // then push left side to stack\n//               if (p - 1 > l) {\n//                   stack[++top] = l;\n//                   stack[++top] = p - 1;\n//               }\n//\n//               // If there are elements on right side of pivot,\n//               // then push right side to stack\n//               if (p + 1 < h) {\n//                   stack[++top] = p + 1;\n//                   stack[++top] = h;\n//               }\n//           }\n//   }\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n//storage, so is global variable allowed?\n    this.state = {\n      array: [],\n    };\n  }\n\n//load for the first time, or refresh page\n  componentDidMount() {\n    this.resetArray();\n  }\n\n//reset the array with new values, the same functio that is\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    }\n    //create new array, replace the previous one\n    this.setState({array});\n  }\n\n  mergeSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2; //either the first pair or the third pair\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        setTimeout(function(){\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(function(){\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED);\n\n        if(RUN == false){\n          RUN = true;\n          RUNNING = false;\n          return;\n        }\n      }\n    }\n  }\n\n\n\n  quickSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n    let arr = this.state.array;\n\n    let swap = (arr, i, j) => {\n        let tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n\n        let arrayBars = document.getElementsByClassName('array-bar');\n        arrayBars[j].style.height = `${arr[j]}px`;\n        arrayBars[j+1].style.height = `${arr[j+1]}px`;\n\n    };\n\n    let partition = (arr, low, high) => {\n        let q = low, i;\n        for (i = low; i < high; i++) {\n            if (arr[i] < arr[high]) {\n                swap(arr, i, q);\n                q++;\n            }\n        }\n        swap(arr, i, q);\n        return q;\n    };\n\n    let quickSort = (arr, low, high) => {\n        if (low < high) {\n            let pivot = partition(arr, low, high);\n            quickSort(arr, low, pivot - 1);\n            quickSort(arr, pivot + 1, high);\n            return arr;\n        }\n    };\n  }\n\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n\n  async bubbleSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n    let array = this.state.array;\n\n    for(let i = 0; i<array.length - 1; i++){\n      for(let j = 0; j<array.length- i-1; j++){\n          let arrayBars = document.getElementsByClassName('array-bar');\n          arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\n\n          if(array[j] > array[j+1]){\n            let temp = array[j];\n            array[j] = array [j+1];\n            array[j+1] = temp;\n            await new Promise(r => setTimeout(r,  ANIMATION_SPEED));\n            arrayBars[j].style.height = `${array[j]}px`;\n            arrayBars[j+1].style.height = `${array[j+1]}px`;\n          }\n          arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = PRIMARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n\n          if(RUN == false){\n            RUN = true;\n            RUNNING = false;\n            return;\n          }\n        }\n    }\n  }\n\n  stop(){\n    RUN = !RUN;\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.stop()}>Stop</button>\n\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}
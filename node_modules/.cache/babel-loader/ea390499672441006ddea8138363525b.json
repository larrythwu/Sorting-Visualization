{"ast":null,"code":"var _jsxFileName = \"/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css'; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 100; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red'; //animation speed\n\nlet ANIMATION_SPEED = 30;\nlet RUN = true;\nlet RUNNING = false;\n\nasync function bubbleSort() {\n  if (RUNNING == true) return;else RUNNING = true;\n  let array = this.state.array;\n\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      let arrayBars = document.getElementsByClassName('array-bar');\n      arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n      arrayBars[j + 1].style.backgroundColor = SECONDARY_COLOR;\n\n      if (array[j] > array[j + 1]) {\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED));\n        arrayBars[j].style.height = `${array[j]}px`;\n        arrayBars[j + 1].style.height = `${array[j + 1]}px`;\n      }\n\n      arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n      arrayBars[j + 1].style.backgroundColor = PRIMARY_COLOR;\n      await new Promise(r => setTimeout(r, ANIMATION_SPEED / 5));\n\n      if (RUN == false) {\n        RUN = true;\n        RUNNING = false;\n        return;\n      }\n    }\n  }\n}\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props); //storage, so is global variable allowed?\n\n    this.state = {\n      array: []\n    };\n  } //load for the first time, or refresh page\n\n\n  componentDidMount() {\n    this.resetArray();\n  } //reset the array with new values, the same functio that is\n\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    } //create new array, replace the previous one\n\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2; //either the first pair or the third pair\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(function () {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(function () {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED);\n\n        if (RUN == false) {\n          RUN = true;\n          RUNNING = false;\n          return;\n        }\n      }\n    }\n  }\n\n  quickSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {} // We leave it as an exercise to the viewer of this code to implement this method.\n  //\n  // async bubbleSort() {\n  //   if(RUNNING == true)\n  //     return;\n  //   else\n  //     RUNNING = true;\n  //\n  //   let array = this.state.array;\n  //   for(let i = 0; i<array.length - 1; i++){\n  //     for(let j = 0; j<array.length- i-1; j++){\n  //         let arrayBars = document.getElementsByClassName('array-bar');\n  //         arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n  //         arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\n  //\n  //         if(array[j] > array[j+1]){\n  //           let temp = array[j];\n  //           array[j] = array [j+1];\n  //           array[j+1] = temp;\n  //           await new Promise(r => setTimeout(r,  ANIMATION_SPEED));\n  //           arrayBars[j].style.height = `${array[j]}px`;\n  //           arrayBars[j+1].style.height = `${array[j+1]}px`;\n  //         }\n  //         arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n  //         arrayBars[j+1].style.backgroundColor = PRIMARY_COLOR;\n  //         await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n  //\n  //         if(RUN == false){\n  //           RUN = true;\n  //           RUNNING = false;\n  //           return;\n  //         }\n  //       }\n  //   }\n  // }\n\n\n  stop() {\n    RUN = !RUN;\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.stop(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }, \"Stop\"));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED","RUN","RUNNING","bubbleSort","array","state","i","length","j","arrayBars","document","getElementsByClassName","style","backgroundColor","temp","Promise","r","setTimeout","height","SortingVisualizer","Component","constructor","props","componentDidMount","resetArray","push","randomIntFromInterval","setState","mergeSort","animations","isColorChange","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","quickSort","heapSort","stop","render","map","value","idx","min","max","Math","floor","random","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css';\n\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n//animation speed\nlet ANIMATION_SPEED = 30;\n\nlet RUN = true;\nlet RUNNING = false;\n\n  async function bubbleSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n    let array = this.state.array;\n    for(let i = 0; i<array.length - 1; i++){\n      for(let j = 0; j<array.length- i-1; j++){\n          let arrayBars = document.getElementsByClassName('array-bar');\n          arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\n\n          if(array[j] > array[j+1]){\n            let temp = array[j];\n            array[j] = array [j+1];\n            array[j+1] = temp;\n            await new Promise(r => setTimeout(r,  ANIMATION_SPEED));\n            arrayBars[j].style.height = `${array[j]}px`;\n            arrayBars[j+1].style.height = `${array[j+1]}px`;\n          }\n          arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = PRIMARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n\n          if(RUN == false){\n            RUN = true;\n            RUNNING = false;\n            return;\n          }\n        }\n    }\n  }\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n//storage, so is global variable allowed?\n    this.state = {\n      array: [],\n    };\n  }\n\n//load for the first time, or refresh page\n  componentDidMount() {\n    this.resetArray();\n  }\n\n//reset the array with new values, the same functio that is\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    }\n    //create new array, replace the previous one\n    this.setState({array});\n  }\n\n  mergeSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2; //either the first pair or the third pair\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        setTimeout(function(){\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        setTimeout(function(){\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED);\n\n        if(RUN == false){\n          RUN = true;\n          RUNNING = false;\n          return;\n        }\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  //\n  // async bubbleSort() {\n  //   if(RUNNING == true)\n  //     return;\n  //   else\n  //     RUNNING = true;\n  //\n  //   let array = this.state.array;\n  //   for(let i = 0; i<array.length - 1; i++){\n  //     for(let j = 0; j<array.length- i-1; j++){\n  //         let arrayBars = document.getElementsByClassName('array-bar');\n  //         arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n  //         arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\n  //\n  //         if(array[j] > array[j+1]){\n  //           let temp = array[j];\n  //           array[j] = array [j+1];\n  //           array[j+1] = temp;\n  //           await new Promise(r => setTimeout(r,  ANIMATION_SPEED));\n  //           arrayBars[j].style.height = `${array[j]}px`;\n  //           arrayBars[j+1].style.height = `${array[j+1]}px`;\n  //         }\n  //         arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n  //         arrayBars[j+1].style.backgroundColor = PRIMARY_COLOR;\n  //         await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n  //\n  //         if(RUN == false){\n  //           RUN = true;\n  //           RUNNING = false;\n  //           return;\n  //         }\n  //       }\n  //   }\n  // }\n\n  stop(){\n    RUN = !RUN;\n  }\n\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.stop()}>Stop</button>\n\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}
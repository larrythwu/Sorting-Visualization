{"ast":null,"code":"var _jsxFileName = \"/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css'; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 100; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red'; //animation speed\n\nlet ANIMATION_SPEED = 30;\nlet STOP = false;\nlet RUNNING = false;\nconst arrayBars = document.getElementsByClassName('array-bar');\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props); //storage, so is global variable allowed?\n\n    this.state = {\n      array: []\n    };\n  } //load for the first time, or refresh page\n\n\n  componentDidMount() {\n    this.resetArray();\n    STOP = false;\n  } //reset the array with new values, the same functio that is\n\n\n  resetArray() {\n    // console.log(\"Entered resetArray\")\n    STOP = true;\n    RUNNING = false;\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    } //create new array, replace the previous one\n\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {// if(RUNNING == true)\n    //   return;\n    // else\n    //   RUNNING = true;\n    //\n    // const animations = getMergeSortAnimations(this.state.array);\n    // for (let i = 0; i < animations.length; i++) {\n    //   //const arrayBars = document.getElementsByClassName('array-bar');\n    //   const isColorChange = i % 3 !== 2; //either the first pair or the third pair\n    //   if (isColorChange) {\n    //     const [barOneIdx, barTwoIdx] = animations[i];\n    //     const barOneStyle = arrayBars[barOneIdx].style;\n    //     const barTwoStyle = arrayBars[barTwoIdx].style;\n    //     const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n    //\n    //     setTimeout(function(){\n    //       barOneStyle.backgroundColor = color;\n    //       barTwoStyle.backgroundColor = color;\n    //     }, i * ANIMATION_SPEED);\n    //   } else {\n    //     setTimeout(function(){\n    //       const [barOneIdx, newHeight] = animations[i];\n    //       const barOneStyle = arrayBars[barOneIdx].style;\n    //       barOneStyle.height = `${newHeight}px`;\n    //     }, i * ANIMATION_SPEED);\n    //\n    //     if(STOP == true){\n    //       STOP = false;\n    //       RUNNING = false;\n    //       return;\n    //     }\n    //   }\n    // }\n  }\n\n  swap(arr, i, j) {\n    let tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp; //let arrayBars = document.getElementsByClassName('array-bar');\n\n    arrayBars[i].style.height = `${arr[i]}px`;\n    arrayBars[j].style.height = `${arr[j]}px`;\n  }\n\n  async partition(arr, low, high) {\n    let q = low;\n    let i = 0;\n    arrayBars[high].style.backgroundColor = 'green';\n\n    for (i = low; i < high; i++) {\n      arrayBars[i].style.backgroundColor = SECONDARY_COLOR;\n      arrayBars[q].style.backgroundColor = 'blue';\n\n      if (arr[i] < arr[high]) {\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED / 10));\n        arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n        this.swap(arr, i, q);\n        q++;\n      }\n\n      await new Promise(r => setTimeout(r, ANIMATION_SPEED / 10));\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\n      if (STOP == true) {\n        arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n        return;\n      }\n    }\n\n    arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n    arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n    this.swap(arr, i, q);\n    return q;\n  }\n\n  async quickSortHelper(arr, low, high) {\n    if (low < high) {\n      let pivot = await this.partition(arr, low, high); //const arrayBars = document.getElementsByClassName('array-bar');\n      //arrayBars[pivot].style.backgroundColor = SECONDARY_COLOR;\n      //await new Promise(r => setTimeout(r,  ANIMATION_SPEED*10));\n      //arrayBars[pivot].style.backgroundColor = PRIMARY_COLOR;\n\n      if (STOP == true) {\n        RUNNING = false;\n        return;\n      }\n\n      await this.quickSortHelper(arr, low, pivot - 1);\n      await this.quickSortHelper(arr, pivot + 1, high);\n      return arr;\n    }\n  }\n\n  async quickSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    STOP = false;\n    let array = this.state.array;\n    let length = array.length;\n    await this.quickSortHelper(array, 0, length - 1);\n    STOP = false;\n    RUNNING = false;\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  async bubbleSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    STOP = false;\n    let array = this.state.array;\n    let sorted = true;\n\n    for (let i = 0; i < array.length - 1; i++) {\n      for (let j = 0; j < array.length - i - 1; j++) {\n        //let arrayBars = document.getElementsByClassName('array-bar');\n        arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n        arrayBars[j + 1].style.backgroundColor = SECONDARY_COLOR;\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED));\n\n        if (array[j] > array[j + 1]) {\n          sorted = false;\n          let temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n          arrayBars[j].style.height = `${array[j]}px`;\n          arrayBars[j + 1].style.height = `${array[j + 1]}px`;\n        }\n\n        arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[j + 1].style.backgroundColor = PRIMARY_COLOR;\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED / 5));\n\n        if (STOP == true) {\n          STOP = false;\n          RUNNING = false;\n          return;\n        }\n      }\n\n      if (sorted == true) {\n        break;\n      }\n    }\n\n    RUNNING = false;\n  }\n\n  stop() {\n    // console.log(\"Entered stop toggle\")\n    STOP = !STOP;\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 7\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.stop(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }, \"Stop\"));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED","STOP","RUNNING","arrayBars","document","getElementsByClassName","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","swap","arr","j","tmp","style","height","partition","low","high","q","backgroundColor","Promise","r","setTimeout","quickSortHelper","pivot","quickSort","length","heapSort","bubbleSort","sorted","temp","stop","render","map","value","idx","min","max","Math","floor","random","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css';\n\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n//animation speed\nlet ANIMATION_SPEED = 30;\n\nlet STOP = false;\nlet RUNNING = false;\nconst arrayBars = document.getElementsByClassName('array-bar');\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n//storage, so is global variable allowed?\n  this.state = {\n      array: [],\n    };\n  }\n\n//load for the first time, or refresh page\n  componentDidMount() {\n    this.resetArray();\n    STOP = false;\n  }\n\n//reset the array with new values, the same functio that is\n  resetArray() {\n    // console.log(\"Entered resetArray\")\n    STOP = true;\n    RUNNING = false;\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    }\n    //create new array, replace the previous one\n    this.setState({array});\n  }\n\n  mergeSort() {\n    // if(RUNNING == true)\n    //   return;\n    // else\n    //   RUNNING = true;\n    //\n    // const animations = getMergeSortAnimations(this.state.array);\n    // for (let i = 0; i < animations.length; i++) {\n    //   //const arrayBars = document.getElementsByClassName('array-bar');\n    //   const isColorChange = i % 3 !== 2; //either the first pair or the third pair\n    //   if (isColorChange) {\n    //     const [barOneIdx, barTwoIdx] = animations[i];\n    //     const barOneStyle = arrayBars[barOneIdx].style;\n    //     const barTwoStyle = arrayBars[barTwoIdx].style;\n    //     const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n    //\n    //     setTimeout(function(){\n    //       barOneStyle.backgroundColor = color;\n    //       barTwoStyle.backgroundColor = color;\n    //     }, i * ANIMATION_SPEED);\n    //   } else {\n    //     setTimeout(function(){\n    //       const [barOneIdx, newHeight] = animations[i];\n    //       const barOneStyle = arrayBars[barOneIdx].style;\n    //       barOneStyle.height = `${newHeight}px`;\n    //     }, i * ANIMATION_SPEED);\n    //\n    //     if(STOP == true){\n    //       STOP = false;\n    //       RUNNING = false;\n    //       return;\n    //     }\n    //   }\n    // }\n  }\n\n swap (arr, i, j){\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n\n      //let arrayBars = document.getElementsByClassName('array-bar');\n      arrayBars[i].style.height = `${arr[i]}px`;\n      arrayBars[j].style.height = `${arr[j]}px`;\n  }\n\n   async partition (arr, low, high){\n      let q = low;\n      let i = 0;\n      arrayBars[high].style.backgroundColor = 'green';\n\n      for (i = low; i < high; i++) {\n        arrayBars[i].style.backgroundColor = SECONDARY_COLOR;\n        arrayBars[q].style.backgroundColor = 'blue';\n        if (arr[i] < arr[high]) {\n            await new Promise(r => setTimeout(r,  ANIMATION_SPEED/10));\n            arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n            this.swap(arr, i, q);\n            q++;\n        }\n        await new Promise(r => setTimeout(r,  ANIMATION_SPEED/10));\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\n        if(STOP == true){\n          arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n          return;\n        }\n      }\n      arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n      arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n\n      this.swap(arr, i, q);\n      return q;\n    }\n\n  async quickSortHelper(arr, low, high){\n      if (low < high) {\n          let pivot = await this.partition(arr, low, high);\n\n          //const arrayBars = document.getElementsByClassName('array-bar');\n          //arrayBars[pivot].style.backgroundColor = SECONDARY_COLOR;\n          //await new Promise(r => setTimeout(r,  ANIMATION_SPEED*10));\n          //arrayBars[pivot].style.backgroundColor = PRIMARY_COLOR;\n          if(STOP == true){\n            RUNNING = false;\n            return;\n          }\n          await this.quickSortHelper(arr, low, pivot - 1);\n          await this.quickSortHelper(arr, pivot + 1, high);\n          return arr;\n      }\n  }\n\n  async quickSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n    STOP = false;\n\n\n    let array = this.state.array;\n    let length = array.length;\n    await this.quickSortHelper(array, 0, length-1);\n\n    STOP = false;\n    RUNNING = false;\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n\n  async bubbleSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n    STOP = false;\n\n    let array = this.state.array;\n    let sorted = true;\n\n    for(let i = 0; i<array.length - 1; i++){\n      for(let j = 0; j<array.length- i-1; j++){\n          //let arrayBars = document.getElementsByClassName('array-bar');\n          arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED));\n\n          if(array[j] > array[j+1]){\n            sorted = false;\n            let temp = array[j];\n            array[j] = array [j+1];\n            array[j+1] = temp;\n            arrayBars[j].style.height = `${array[j]}px`;\n            arrayBars[j+1].style.height = `${array[j+1]}px`;\n          }\n          arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = PRIMARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n\n        if(STOP == true){\n          STOP = false;\n          RUNNING = false;\n          return;\n          }\n        }\n        if(sorted == true){\n          break;\n        }\n    }\n    RUNNING = false;\n  }\n\n  stop(){\n    // console.log(\"Entered stop toggle\")\n    STOP = !STOP;\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.stop()}>Stop</button>\n\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}
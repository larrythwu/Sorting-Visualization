{"ast":null,"code":"var _jsxFileName = \"/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css';\nimport { Button } from '../components/Button.jsx'; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 100; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red'; //animation speed ms\n\nlet ANIMATION_SPEED = 30; //stop a certain sorting process\n\nlet STOP = false; //indicate if a sorting is already running\n\nlet RUNNING = false; //current array\n\nconst arrayBars = document.getElementsByClassName('array-bar');\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  } //load for the first time, or refresh page\n\n\n  componentDidMount() {\n    this.resetArray();\n    STOP = false;\n  } //reset the array with new values, the same functio that is\n\n\n  resetArray() {\n    // console.log(\"Entered resetArray\")\n    STOP = true;\n    RUNNING = false;\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    } //create new array, replace the previous one\n\n\n    this.setState({\n      array\n    });\n  }\n\n  async update_arrayBars(arr) {\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.height = `${arr[i]}px`;\n      if (STOP == false) await new Promise(r => setTimeout(r, ANIMATION_SPEED / 5));\n    }\n  }\n\n  async merge_sort(arr) {\n    let sorted = arr.slice();\n    let n = sorted.length;\n    let buffer = new Array(n);\n\n    for (let size = 1; size < n; size *= 2) {\n      for (let leftStart = 0; leftStart < n; leftStart += 2 * size) {\n        let left = leftStart,\n            right = Math.min(left + size, n),\n            leftLimit = right,\n            rightLimit = Math.min(right + size, n),\n            i = left;\n\n        while (left < leftLimit && right < rightLimit) {\n          arrayBars[left].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[right].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r, ANIMATION_SPEED / 2));\n          arrayBars[left].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[right].style.backgroundColor = PRIMARY_COLOR;\n\n          if (STOP == true) {\n            await this.update_arrayBars(sorted);\n            STOP = false;\n            return sorted;\n          }\n\n          if (sorted[left] <= sorted[right]) {\n            buffer[i++] = sorted[left++];\n          } else {\n            buffer[i++] = sorted[right++];\n          }\n        }\n\n        while (left < leftLimit) {\n          arrayBars[left].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r, ANIMATION_SPEED / 2));\n          arrayBars[left].style.backgroundColor = PRIMARY_COLOR;\n          buffer[i++] = sorted[left++];\n        }\n\n        while (right < rightLimit) {\n          arrayBars[right].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r, ANIMATION_SPEED / 2));\n          arrayBars[right].style.backgroundColor = PRIMARY_COLOR;\n          buffer[i++] = sorted[right++];\n        }\n      }\n\n      let temp = sorted;\n      sorted = buffer;\n      buffer = temp;\n    }\n\n    return sorted;\n  }\n\n  async mergeSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    STOP = false;\n    this.state.array = await this.merge_sort(this.state.array);\n    RUNNING = false;\n  }\n\n  swap(arr, i, j) {\n    let tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n    arrayBars[i].style.height = `${arr[i]}px`;\n    arrayBars[j].style.height = `${arr[j]}px`;\n  }\n\n  async partition(arr, low, high) {\n    let q = low;\n    let i = 0;\n    arrayBars[high].style.backgroundColor = 'green';\n\n    for (i = low; i < high; i++) {\n      arrayBars[i].style.backgroundColor = SECONDARY_COLOR;\n      arrayBars[q].style.backgroundColor = 'blue';\n\n      if (arr[i] < arr[high]) {\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED / 10));\n        arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n        this.swap(arr, i, q);\n        q++;\n      }\n\n      await new Promise(r => setTimeout(r, ANIMATION_SPEED / 10));\n      arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\n      if (STOP == true) {\n        arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n        return;\n      }\n    }\n\n    arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n    arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n    this.swap(arr, i, q);\n    return q;\n  }\n\n  async quickSortHelper(arr, low, high) {\n    if (low < high) {\n      let pivot = await this.partition(arr, low, high); //const arrayBars = document.getElementsByClassName('array-bar');\n      //arrayBars[pivot].style.backgroundColor = SECONDARY_COLOR;\n      //await new Promise(r => setTimeout(r,  ANIMATION_SPEED*10));\n      //arrayBars[pivot].style.backgroundColor = PRIMARY_COLOR;\n\n      if (STOP == true) {\n        RUNNING = false;\n        return;\n      }\n\n      await this.quickSortHelper(arr, low, pivot - 1);\n      await this.quickSortHelper(arr, pivot + 1, high);\n      return arr;\n    }\n  }\n\n  async quickSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    STOP = false;\n    let array = this.state.array;\n    let length = array.length;\n    await this.quickSortHelper(array, 0, length - 1);\n    STOP = false;\n    RUNNING = false;\n  }\n\n  heapify(heap, i, max) {\n    var index, leftChild, righChild;\n\n    while (i < max) {\n      index = i;\n      leftChild = 2 * i + 1;\n      righChild = leftChild + 1;\n\n      if (leftChild < max && heap[leftChild] > heap[index]) {\n        index = leftChild;\n      }\n\n      if (righChild < max && heap[righChild] > heap[index]) {\n        index = righChild;\n      }\n\n      if (index == i) {\n        return;\n      }\n\n      this.swap(heap, i, index);\n      i = index;\n    }\n  }\n\n  buildMaxHeap(array) {\n    var i;\n    i = array.length / 2 - 1;\n    i = Math.floor(i); // Build a max heap out of\n    // all array elements passed in.\n\n    while (i >= 0) {\n      this.heapify(array, i, array.length);\n      i -= 1;\n    }\n  }\n\n  heapSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    STOP = false;\n    let array = this.state.array; // Build our max heap.\n\n    this.buildMaxHeap(array); // Find last element.\n\n    lastElement = array.length - 1; // Continue heap sorting until we have\n    // just one element left in the array.\n\n    while (lastElement > 0) {\n      swap(array, 0, lastElement);\n      this.heapify(array, 0, lastElement);\n      lastElement -= 1;\n    }\n\n    STOP = false;\n    RUNNING = false;\n  }\n\n  async bubbleSort() {\n    if (RUNNING == true) return;else RUNNING = true;\n    STOP = false;\n    let array = this.state.array;\n    let sorted = true;\n\n    for (let i = 0; i < array.length - 1; i++) {\n      for (let j = 0; j < array.length - i - 1; j++) {\n        //let arrayBars = document.getElementsByClassName('array-bar');\n        arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n        arrayBars[j + 1].style.backgroundColor = SECONDARY_COLOR;\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED));\n\n        if (array[j] > array[j + 1]) {\n          sorted = false;\n          let temp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = temp;\n          arrayBars[j].style.height = `${array[j]}px`;\n          arrayBars[j + 1].style.height = `${array[j + 1]}px`;\n        }\n\n        arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n        arrayBars[j + 1].style.backgroundColor = PRIMARY_COLOR;\n        await new Promise(r => setTimeout(r, ANIMATION_SPEED / 5));\n\n        if (STOP == true) {\n          STOP = false;\n          RUNNING = false;\n          return;\n        }\n      }\n\n      if (sorted == true) {\n        break;\n      }\n    }\n\n    RUNNING = false;\n  }\n\n  stop() {\n    // console.log(\"Entered stop toggle\")\n    STOP = !STOP;\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.resetArray(),\n      type: \"button\",\n      buttonStyle: \"btn--success--solid\",\n      buttonSize: \"btn--medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.mergeSort(),\n      type: \"button\",\n      buttonStyle: \"btn--primary--outline\",\n      buttonSize: \"btn--medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.quickSort(),\n      type: \"button\",\n      buttonStyle: \"btn--primary--outline\",\n      buttonSize: \"btn--medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.heapSort(),\n      type: \"button\",\n      buttonStyle: \"btn--primary--outline\",\n      buttonSize: \"btn--medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.bubbleSort(),\n      type: \"button\",\n      buttonStyle: \"btn--primary--outline\",\n      buttonSize: \"btn--medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.stop(),\n      type: \"button\",\n      buttonStyle: \"btn--danger--solid\",\n      buttonSize: \"btn--medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }\n    }, \"Stop\")), array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }\n    })));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/larrywu/Desktop/Projects/sorting_visualization/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","Button","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED","STOP","RUNNING","arrayBars","document","getElementsByClassName","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","update_arrayBars","arr","length","style","height","Promise","r","setTimeout","merge_sort","sorted","slice","n","buffer","Array","size","leftStart","left","right","Math","min","leftLimit","rightLimit","backgroundColor","temp","mergeSort","swap","j","tmp","partition","low","high","q","quickSortHelper","pivot","quickSort","heapify","heap","max","index","leftChild","righChild","buildMaxHeap","floor","heapSort","lastElement","bubbleSort","stop","render","map","value","idx","random","arraysAreEqual","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './sortingVisualizer.css';\nimport {Button} from '../components/Button.jsx'\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n//animation speed ms\nlet ANIMATION_SPEED = 30;\n\n//stop a certain sorting process\nlet STOP = false;\n\n//indicate if a sorting is already running\nlet RUNNING = false;\n\n\n//current array\nconst arrayBars = document.getElementsByClassName('array-bar');\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n  this.state = {\n      array: [],\n    };\n  }\n\n//load for the first time, or refresh page\n  componentDidMount() {\n    this.resetArray();\n    STOP = false;\n  }\n\n//reset the array with new values, the same functio that is\n  resetArray() {\n    // console.log(\"Entered resetArray\")\n    STOP = true;\n    RUNNING = false;\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // push number in the range of 10~500 into the array\n      array.push(randomIntFromInterval(10, 500));\n    }\n    //create new array, replace the previous one\n    this.setState({array});\n  }\n\nasync update_arrayBars(arr){\n  for(let i =0; i<arrayBars.length; i++){\n    arrayBars[i].style.height = `${arr[i]}px`;\n    if(STOP == false)\n    await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n  }\n\n}\n\nasync merge_sort(arr) {\n    let sorted = arr.slice();\n    let n = sorted.length;\n    let buffer = new Array(n);\n\n    for (let size = 1; size < n; size *= 2) {\n      for (let leftStart = 0; leftStart < n; leftStart += 2*size) {\n        let left = leftStart,\n            right = Math.min(left + size, n),\n            leftLimit = right,\n            rightLimit = Math.min(right + size, n),\n            i = left;\n        while (left < leftLimit && right < rightLimit) {\n          arrayBars[left].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[right].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/2));\n          arrayBars[left].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[right].style.backgroundColor = PRIMARY_COLOR;\n\n          if(STOP == true){\n            await this.update_arrayBars(sorted);\n            STOP = false;\n            return sorted;\n          }\n\n          if (sorted[left] <= sorted[right]) {\n            buffer[i++] = sorted[left++];\n          } else {\n            buffer[i++] = sorted[right++];\n          }\n        }\n\n        while (left < leftLimit) {\n          arrayBars[left].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/2));\n          arrayBars[left].style.backgroundColor = PRIMARY_COLOR;\n          buffer[i++] = sorted[left++];\n        }\n        while (right < rightLimit) {\n          arrayBars[right].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/2));\n          arrayBars[right].style.backgroundColor = PRIMARY_COLOR;\n          buffer[i++] = sorted[right++];\n        }\n      }\n\n      let temp = sorted;\n          sorted = buffer;\n          buffer = temp;\n\n    }\n\n    return sorted;\n  }\n\n  async mergeSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n    STOP = false;\n\n    this.state.array = await this.merge_sort(this.state.array);\n    RUNNING = false;\n  }\n\n swap (arr, i, j){\n      let tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      arrayBars[i].style.height = `${arr[i]}px`;\n      arrayBars[j].style.height = `${arr[j]}px`;\n  }\n\n   async partition (arr, low, high){\n      let q = low;\n      let i = 0;\n      arrayBars[high].style.backgroundColor = 'green';\n\n      for (i = low; i < high; i++) {\n        arrayBars[i].style.backgroundColor = SECONDARY_COLOR;\n        arrayBars[q].style.backgroundColor = 'blue';\n        if (arr[i] < arr[high]) {\n            await new Promise(r => setTimeout(r,  ANIMATION_SPEED/10));\n            arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n            this.swap(arr, i, q);\n            q++;\n        }\n        await new Promise(r => setTimeout(r,  ANIMATION_SPEED/10));\n        arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n\n        if(STOP == true){\n          arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[i].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n          return;\n        }\n      }\n      arrayBars[high].style.backgroundColor = PRIMARY_COLOR;\n      arrayBars[q].style.backgroundColor = PRIMARY_COLOR;\n\n      this.swap(arr, i, q);\n      return q;\n    }\n\n  async quickSortHelper(arr, low, high){\n      if (low < high) {\n          let pivot = await this.partition(arr, low, high);\n\n          //const arrayBars = document.getElementsByClassName('array-bar');\n          //arrayBars[pivot].style.backgroundColor = SECONDARY_COLOR;\n          //await new Promise(r => setTimeout(r,  ANIMATION_SPEED*10));\n          //arrayBars[pivot].style.backgroundColor = PRIMARY_COLOR;\n          if(STOP == true){\n            RUNNING = false;\n            return;\n          }\n          await this.quickSortHelper(arr, low, pivot - 1);\n          await this.quickSortHelper(arr, pivot + 1, high);\n          return arr;\n      }\n  }\n\n  async quickSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n    STOP = false;\n\n\n    let array = this.state.array;\n    let length = array.length;\n    await this.quickSortHelper(array, 0, length-1);\n\n    STOP = false;\n    RUNNING = false;\n  }\n\n heapify(heap, i, max) {\n    var index, leftChild, righChild;\n\n    while(i < max) {\n      index = i;\n\n      leftChild = 2*i + 1;\n      righChild = leftChild + 1;\n\n      if (leftChild < max && heap[leftChild] > heap[index]) {\n        index = leftChild;\n      }\n\n      if (righChild < max && heap[righChild] > heap[index]) {\n        index = righChild;\n      }\n\n      if (index == i) {\n        return;\n      }\n\n      this.swap(heap,i, index);\n\n      i = index;\n    }\n  }\n  buildMaxHeap(array) {\n    var i;\n    i = array.length / 2 - 1;\n    i = Math.floor(i);\n\n    // Build a max heap out of\n    // all array elements passed in.\n    while (i >= 0) {\n      this.heapify(array, i, array.length);\n      i -= 1;\n    }\n  }\n\n  heapSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n    STOP = false;\n\n\n    let array = this.state.array;\n    // Build our max heap.\n    this.buildMaxHeap(array);\n\n    // Find last element.\n    lastElement = array.length - 1;\n\n    // Continue heap sorting until we have\n    // just one element left in the array.\n    while(lastElement > 0) {\n      swap(array, 0, lastElement);\n\n      this.heapify(array, 0, lastElement);\n\n      lastElement -= 1\n    }\n\n    STOP = false;\n    RUNNING = false;\n  }\n\n\n  async bubbleSort() {\n    if(RUNNING == true)\n      return;\n    else\n      RUNNING = true;\n\n    STOP = false;\n\n    let array = this.state.array;\n    let sorted = true;\n\n    for(let i = 0; i<array.length - 1; i++){\n      for(let j = 0; j<array.length- i-1; j++){\n          //let arrayBars = document.getElementsByClassName('array-bar');\n          arrayBars[j].style.backgroundColor = SECONDARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = SECONDARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED));\n\n          if(array[j] > array[j+1]){\n            sorted = false;\n            let temp = array[j];\n            array[j] = array [j+1];\n            array[j+1] = temp;\n            arrayBars[j].style.height = `${array[j]}px`;\n            arrayBars[j+1].style.height = `${array[j+1]}px`;\n          }\n          arrayBars[j].style.backgroundColor = PRIMARY_COLOR;\n          arrayBars[j+1].style.backgroundColor = PRIMARY_COLOR;\n          await new Promise(r => setTimeout(r,  ANIMATION_SPEED/5));\n\n        if(STOP == true){\n          STOP = false;\n          RUNNING = false;\n          return;\n          }\n        }\n        if(sorted == true){\n          break;\n        }\n    }\n    RUNNING = false;\n  }\n\n  stop(){\n    // console.log(\"Entered stop toggle\")\n    STOP = !STOP;\n  }\n\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n      <div className = \"button-container\">\n        <Button onClick={() => this.resetArray()} type=\"button\"\n        buttonStyle=\"btn--success--solid\"\n        buttonSize=\"btn--medium\">Generate New Array</Button>\n\n        <Button onClick={() => this.mergeSort()} type=\"button\"\n        buttonStyle=\"btn--primary--outline\"\n        buttonSize=\"btn--medium\">Merge Sort</Button>\n\n        <Button onClick={() => this.quickSort()} type=\"button\"\n        buttonStyle=\"btn--primary--outline\"\n        buttonSize=\"btn--medium\">Quick Sort</Button>\n\n        <Button onClick={() => this.heapSort()} type=\"button\"\n        buttonStyle=\"btn--primary--outline\"\n        buttonSize=\"btn--medium\">Heap Sort</Button>\n\n        <Button onClick={() => this.bubbleSort()} type=\"button\"\n        buttonStyle=\"btn--primary--outline\"\n        buttonSize=\"btn--medium\">Bubble Sort</Button>\n\n        <Button onClick={() => this.stop()} type=\"button\"\n        buttonStyle=\"btn--danger--solid\"\n        buttonSize=\"btn--medium\">Stop</Button>\n        </div>\n\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n\n\n\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}